{"version":3,"sources":["webpack://codered_nps_widget/webpack/universalModuleDefinition","webpack://codered_nps_widget/webpack/bootstrap","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/mixins/template-stamp.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/async.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/boot.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/html-tag.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/path.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/settings.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack://codered_nps_widget/./node_modules/@polymer/polymer/polymer-element.js","webpack://codered_nps_widget/./node_modules/polymer-webpack-loader/register-html-template.js","webpack://codered_nps_widget/./node_modules/process/browser.js","webpack://codered_nps_widget/./src/cat.js","webpack://codered_nps_widget/./src/dog.js","webpack://codered_nps_widget/./src/index.js","webpack://codered_nps_widget/./src/nps-widget/index.js","webpack://codered_nps_widget/./src/nps-widget/template.html","webpack://codered_nps_widget/./src/welcome.ts"],"names":["modules","lcModules","findModule","id","toLowerCase","styleOutsideTemplateCheck","inst","querySelector","console","warn","DomModule","name","old","value","namespace","register","__assetpath","owner","window","HTMLImports","importForElement","document","ownerDocument","url","getAttribute","baseURI","selector","m","HTMLElement","prototype","customElements","define","dumpRegistrations","ElementMixin","polymerElementBase","base","propertyDefaults","constructor","hasOwnProperty","JSCompiler_renameProperty","__propertyDefaults","props","_properties","p","info","ownObservers","__ownObservers","observers","createPropertyFromConfig","proto","allProps","computed","readOnly","_hasReadOnlyEffect","_createComputedProperty","_createReadOnlyProperty","reflectToAttribute","_hasReflectEffect","_createReflectedProperty","notify","_hasNotifyEffect","_createNotifyingProperty","observer","_createPropertyObserver","_addPropertyToAttributeMap","processElementStyles","klass","template","is","templateStyles","content","querySelectorAll","stylesWithImports","linkedStyles","firstTemplateChild","firstElementChild","idx","length","s","textContent","_processStyleText","insertBefore","templateStyleIndex","i","templateStyle","cloneNode","parentNode","ShadyCSS","prepareTemplate","PolymerElement","createObservers","error","_template","dynamicFns","_createMethodObserver","import","Object","getPrototypeOf","meta","importMeta","_importPath","module","assetpath","importPath","rootPath","root","$","instanceCount","finalize","_finalizeTemplate","localName","p$","call","_hasAccessor","_setPendingProperty","styleElement","_stampTemplate","_attachDom","dom","attachShadow","shadowRoot","mode","appendChild","Error","properties","styleSubtree","cssText","__polymerFinalized","_bindTemplate","templateInfo","nodeInfo","registrations","_regLog","log","push","undefined","forEach","updateStyles","styleDocument","microtask","PropertiesChanged","property","__dataHasAccessor","assign","_definePropertyAccessor","__dataAttributes","attr","attributeNameForProperty","defineProperty","get","_getProperty","set","_setProperty","prop","_createPropertyAccessor","__dataEnabled","__dataReady","__dataInvalid","__data","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","_flushProperties","_invalidateProperties","ext","changed","_shouldPropertyChange","run","_initializeInstanceProperties","ready","changedProps","_shouldPropertiesChange","_propertiesChanged","currentProps","oldProps","Boolean","_attributeToProperty","attribute","type","map","_deserializeValue","typeForProperty","arguments","_valueToNodeAttribute","node","str","_serializeValue","removeAttribute","setAttribute","toString","Number","superClass","normalizeProperties","output","o","PropertiesMixin","superPropertiesClass","superCtor","ownProperties","__ownProperties","_enableProperties","__finalized","_finalizeClass","createProperties","keys","__properties","caseMap$0","caseMap","nativeProperties","getOwnPropertyNames","saveAccessorValue","model","__dataProto","create","PropertyAccessors","_initializeProtoProperties","el","hasAttribute","Date","JSON","stringify","x","outValue","parse","Array","isNaN","String","a$","observedAttributes","dashToCamelCase","camelToDashCase","CaseMap","dedupeId","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","capitalAttributeRegex","DataTrigger","DataEffect","PropertyEffectsType","ensureOwnEffectMap","effects","protoFx","instFx","runEffects","hasPaths","extraArgs","ran","runEffectsForProperty","rootProperty","fxs","l","fx","lastRun","pathMatchesTrigger","trigger","fn","path","triggerPath","structured","wildcard","runObserverEffect","method","changedProp","dynamicFn","runNotifyEffects","notifyProps","notified","notifyPath","host","__dataHost","eventName","dispatchNotifyEvent","detail","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","handleNotification","event","fromProp","toPath","negate","fromPath","target","_setPendingPropertyOrPath","runReflectEffect","attrName","_propertyToAttribute","runComputedEffects","computeEffects","inputProps","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","computeLinkedPaths","links","__dataLinkedPaths","link","a","b","addBinding","kind","parts","literal","bindings","binding","isCompound","shouldAddListener","listenerEvent","listenerNegate","index","nodeInfoList","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","j","parseArg","_addTemplatePropertyEffect","runBindingEffect","nodeList","source","__isPropertyEffectsClient","_enqueueClient","_evaluateBinding","applyBindingValue","computeBindingValue","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","join","setupBindings","setupCompoundStorage","addNotifyListener","literals","addEventListener","e","createMethodEffect","sig","effectFn","static","methodName","args","arg","_addPropertyEffect","context","_methodHost","marshalArgs","apply","emptyArray","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","bindingRegex","RegExp","literalFromParts","parseMethod","expression","match","trim","replace","split","parseArgs","argList","rawArg","fc","slice","data","values","v","baseChanged","indexOf","matches","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","object","upper","toUpperCase","substring","PropertyEffects","propertyEffectsBase","__dataCounter","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataHasPaths","__dataTemp","__dataClientsInitialized","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__templateInfo","hostStack","registerHost","effect","splice","_hasPropertyEffect","shouldNotify","isPathNotification","isArray","isPath","prevProps","client","_readyClients","__enableOrFlushClients","clients","setReadOnly","_flushClients","_propagatePropertyChanges","propertyEffects","nextTemplateInfo","to","from","len","items","ret","hadLength","pop","start","deleteCount","Math","floor","shift","unshift","propPath","protectedSetter","instanceBinding","_parseTemplate","wasPreBound","last","__templateInfoLast","previousTemplateInfo","beginHosting","endHosting","nodes","childNodes","n","firstChild","nextSibling","removeChild","hostProps","propEffects","noted","nodeType","Node","TEXT_NODE","_parseBindings","origName","test","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","stack","stackLen","templateExtensions","wrapTemplateExtension","t","createElement","replaceChild","attributes","findTemplateNode","parent","parentInfo","parentIndex","applyIdToMap","applyEventListener","events","e$","_addMethodEventListenerToNode","applyTemplateContent","_templateInfo","createNodeEventHandler","handler","TemplateStamp","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","hasInsertionPoint","_addEventListenerToNode","removeEventListener","outerTemplateInfo","stripWhiteSpace","_parseTemplateContent","_parseTemplateNode","element","_parseTemplateNestedTemplate","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","childInfo","infoIndex","createDocumentFragment","attrs","_parseTemplateNodeAttribute","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","cb","setTimeout","timeOut","after","delay","cancel","handle","clearTimeout","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","cancelIdleCallback","microTask","callback","DASH_TO_CAMEL","CAMEL_TO_DASH","dash","camel","LiteralString","string","literalValue","htmlValue","innerHTML","html","strings","reduce","acc","htmlLiteral","MixinFunction","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","baseSet","extended","mixinSet","isAncestor","isDescendant","translate","normalize","dotIndex","newBase","isDeep","resolveUrl","resolveCss","pathFromUrl","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","u","URL","pathname","href","location","implementation","createHTMLDocument","head","anchor","body","pre","post","lastIndexOf","useShadow","ShadyDOM","useNativeCSSProperties","nativeCss","useNativeCustomElements","polyfillWrapFlushCallback","setRootPath","sanitizeDOMValue","setSanitizeDOMValue","newSanitizeDOMValue","passiveTouchGestures","setPassiveTouchGestures","usePassive","stylesFromModules","stylesFromModule","stylesFromTemplate","stylesFromModuleImports","cssFromModules","cssFromModule","cssFromTemplate","cssFromModuleImports","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","SHADY_UNSCOPED_ATTR","importModule","moduleId","PolymerDomModule","styleForImport","importDoc","container","importCss","style","templateWithAssetPath","moduleIds","styles","_styles","_stylesFromModuleImports","include","filter","item","self","unscoped","_unscopedStyle","_style","_cssText","_cssFromModuleImports","RegisterHtmlTemplate","val","trimmedVal","div","exports","process","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","nextTick","Item","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","cwd","chdir","dir","umask","Cat","_name","Dog","Welcome","NpsWidget","appVersion","ENV","NODE_ENV","require","toBody"],"mappings":"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","file":"codered_nps_widget.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"codered_nps_widget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"codered_nps_widget\"] = factory();\n\telse\n\t\troot[\"codered_nps_widget\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\n\nlet modules = {};\nlet lcModules = {};\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      this.id = id;\n      // store id separate from lowercased id so that\n      // in all cases mixedCase id will stored distinctly\n      // and lowercase version is a fallback\n      modules[id] = this;\n      lcModules[id.toLowerCase()] = this;\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { rootPath as rootPath$0 } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl as resolveUrl$0 } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter may return an `HTMLTemplateElement` or a string, which will\n *   automatically be parsed into a template.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n */\nexport const ElementMixin = dedupingMixin(base => {\n\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n        constructor.__ownObservers =\n        constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?\n        /** @type {PolymerElementConstructor} */ (constructor).observers : null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    const templateStyles = template.content.querySelectorAll('style');\n    const stylesWithImports = stylesFromTemplate(template);\n    // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n    const linkedStyles = stylesFromModuleImports(is);\n    const firstTemplateChild = template.content.firstElementChild;\n    for (let idx = 0; idx < linkedStyles.length; idx++) {\n      let s = linkedStyles[idx];\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n      template.content.insertBefore(s, firstTemplateChild);\n    }\n    // keep track of the last \"concrete\" style in the template we have encountered\n    let templateStyleIndex = 0;\n    // ensure all gathered styles are actually in this template.\n    for (let i = 0; i < stylesWithImports.length; i++) {\n      let s = stylesWithImports[i];\n      let templateStyle = templateStyles[templateStyleIndex];\n      // if the style is not in this template, it's been \"included\" and\n      // we put a clone of it in the template before the style that included it\n      if (templateStyle !== s) {\n        s = s.cloneNode(true);\n        templateStyle.parentNode.insertBefore(s, templateStyle);\n      } else {\n        templateStyleIndex++;\n      }\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n   static _finalizeClass() {\n      super._finalizeClass();\n      if (this.hasOwnProperty(\n        JSCompiler_renameProperty('is', this)) &&  this.is) {\n        register(this.prototype);\n      }\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else {\n          template = template.cloneNode(true);\n        }\n      }\n\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @return {void}\n     * @protected\n     * @override\n     */\n     static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(this.prototype, p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * may be either an `HTMLTemplateElement` or a string that will be\n     * automatically parsed into a template.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template = DomModule && DomModule.import(\n          /** @type {PolymerElementConstructor}*/ (this).is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template;\n      }\n      return this._template;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule && DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      instanceCount++;\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath$0;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl$0(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {missingProperties, invalidCasts} Super may or may not implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      if (this.attachShadow) {\n        if (dom) {\n          if (!this.shadowRoot) {\n            this.attachShadow({mode: 'open'});\n          }\n          this.shadowRoot.appendChild(dom);\n          return this.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl$0(this.importPath);\n      }\n      return resolveUrl$0(url, base);\n    }\n\n    /**\n     * Overrides `PropertyAccessors` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * Provides basic tracking of element definitions (registrations) and\n * instance counts.\n *\n * @summary Provides basic tracking of element definitions (registrations) and\n * instance counts.\n */\n`TODO(modulizer): A namespace named Polymer.telemetry was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {Array<PolymerElement>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @this {this}\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {HTMLElement} prototype Element prototype to register\n * @this {this}\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n * @this {this}\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @extends {superClass}\n  * @implements {Polymer_PropertiesChanged}\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {\n       props = normalizeProperties(constructor.properties);\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     const props = this._properties;\n     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\nlet caseMap = caseMap$0;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get observedAttributes()`. Use\n *     `dash-case` attribute names to represent `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to generate\n *     property accessors for each observed attribute. This must be called before the first\n *     instance is created, for example, by calling it before calling `customElements.define`.\n *     It can also be called lazily from the element's `constructor`, as long as it's guarded so\n *     that the call is only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to enable\n *     the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return caseMap.camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root as root$0, isAncestor, isDescendant, get as get$0, translate, isPath as isPath$0, set as set$0, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport * as caseMap from '../utils/case-map.js';\nimport { camelToDashCase as camelToDashCase$0, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/** @const {RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\nlet PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath == path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!PropertyEffectsType} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {void}\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  let values = [];\n  for (let i=0, l=args.length; i<l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      // path changes dirty check against `__dataTemp` only during one \"turn\"\n      // and are cleared when `__dataCounter` returns to 0.\n      this.__dataCounter = 0;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Overrides superclass implementation.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      super._flushProperties();\n      this.__dataCounter--;\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     * @return {void}\n     * @public\n    */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n    */\n    set(path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n    */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {this} inst Element that should be used as scope for\n     *   binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get$0(inst, part.source);\n      } else {\n        if (hasPaths && isPath$0(path)) {\n          value = get$0(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nlet hostStack = {\n\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @return {void}\n   * @this {hostStack}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type {Element} */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      if (element.firstChild) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nwindow.JSCompiler_renameProperty = function(prop) { return prop; };\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n * identifiers.\n *\n * @summary Module that provides utilities for converting between \"dash-case\"\n *   and \"camelCase\".\n */\n`TODO(modulizer): A namespace named Polymer.CaseMap was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return /** @type {T} */ (dedupingMixin);\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n`TODO(modulizer): A namespace named Polymer.Path was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n * @this {Path}\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @this {Path}\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n * @this {Path}\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n * @this {Path}\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\nfunction importModule(moduleId) {\n  const /** DomModule */ PolymerDomModule = customElements.get('dom-module');\n  if (!PolymerDomModule) {\n    return null;\n  }\n  return PolymerDomModule.import(moduleId);\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n`TODO(modulizer): A namespace named Polymer.StyleGather was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n * @this {StyleGather}\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = m.querySelector('template');\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n * @this {StyleGather}\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent = resolveCss(e.textContent, baseURI);\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n * @this {StyleGather}\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n * @this {StyleGather}\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n let cssText = '';\n let styles = _stylesFromModuleImports(module);\n for (let i=0; i < styles.length; i++) {\n   cssText += styles[i].textContent;\n }\n return cssText;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n\n","/* eslint-env browser */\n\nclass RegisterHtmlTemplate {\n  /**\n   * Create a `<template>` element to hold `<dom-module>` content.\n   * This bit of code will execute in the context of the main document,\n   * calling `importNode` on the `<template>`, which in turn triggers\n   * the lifecycle of the `<dom-module>` and allows it to insert its\n   * content into Polymer's global module map. When a Polymer element\n   * boots up it will fetch its template from this module map.\n   * https://github.com/Polymer/polymer/blob/master/lib/mixins/element-mixin.html#L501-L538\n   * @param {string} val A `<dom-module>` as an HTML string\n   */\n  static register(val) {\n    let content;\n    const template = document.createElement('template');\n    template.innerHTML = val;\n    if (template.content) {\n      content = template.content; // eslint-disable-line prefer-destructuring\n    } else {\n      content = document.createDocumentFragment();\n      while (template.firstChild) {\n        content.appendChild(template.firstChild);\n      }\n    }\n    document.importNode(content, true);\n  }\n  /**\n   * Content that will be injected into the main document. This is primarily\n   * for things like `<iron-iconset>` and `<custom-style>` which do not have\n   * templates but rely on HTML Imports ability to apply content to the main\n   * document.\n   * @param {string} val An HTML string\n   */\n  static toBody(val) {\n    const trimmedVal = val.trim();\n    if (trimmedVal) {\n      const div = document.createElement('div');\n      div.innerHTML = trimmedVal;\n      if (div.firstChild) {\n        if (document.body) {\n          document.body.insertBefore(div.firstChild, document.body.firstChild);\n        } else {\n          document.addEventListener('DOMContentLoaded', () => {\n            document.body.insertBefore(div.firstChild, document.body.firstChild);\n          });\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = RegisterHtmlTemplate;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","export default class Cat {\r\n  constructor() {\r\n    this._name = 'Cat';\r\n  }\r\n  get name() {\r\n    return this._name;\r\n  }\r\n}\r\n","export default class Dog {\r\n  constructor() {\r\n    this._name = 'Dog';\r\n  }\r\n  get name() {\r\n    return this._name;\r\n  }\r\n}\r\n","\nimport Cat from './cat.js';\r\nimport Dog from './dog.js';\nimport Welcome from './welcome.ts';\r\nexport { Cat, Dog, Welcome };\n\nimport './nps-widget';\n","import { PolymerElement, html } from '@polymer/polymer';\nimport template from './template.html';\n\nexport default class NpsWidget extends PolymerElement {\n  static get properties() {\n    return {\n      name: {\n        type: String\n      },\n      appVersion: {\n        type: String,\n        value: process.env.appVersion\n      },\n      ENV: {\n        type: String,\n        value: process.env.NODE_ENV\n      }\n    };\n  }\n\n  static get template() {\n    return html([`${template}`]);\n  }\n\n}\n\nwindow.customElements.define('nps-widget', NpsWidget);\n","\nconst RegisterHtmlTemplate = require('polymer-webpack-loader/register-html-template');\n\nRegisterHtmlTemplate.toBody(\"<section> <h1>Test this</h1> <p> This is some test text. </p> </section>\");\n\nRegisterHtmlTemplate.toBody(\"<aside> v[[appVersion]] - ENV: [[ENV]] </aside>\");\n","\nexport default class Welcome {\r\n\n  constructor(usersName: string) {\n    this._name = usersName;\n  };\n\n  private _name: string;\n\n  get usersName():string {\r\n    return this._name;\r\n  }\n  set usersName(value: string) {\n    this._name = value;\r\n  }\n\r\n  GetWelcomeMessage():string {\r\n    return \"<h2>Hello there \" + this._name + \", Let's learn TypeScript</h2>\";\r\n  }\r\n\r\n  ClickMeButton() {\r\n    document.getElementById(\"divMsg\").innerHTML = this.GetWelcomeMessage();\r\n  }\r\n\n\r\n\r\n}\r\n"],"sourceRoot":""}